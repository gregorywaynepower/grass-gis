{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Essential GRASS GIS Guide","text":"<p>Welcome to The Essential GRASS GIS Guide \u2013 Whether you're a student, researcher, or GIS professional, this guide is designed to help you confidently start using GRASS GIS, one of the most powerful open-source geospatial tools available today, for spatial data analysis, raster/vector processing, and complex geospatial workflows.</p> <p></p>"},{"location":"#introduction-to-grass-gis","title":"Introduction to GRASS GIS","text":"<p>GRASS GIS (Geographic Resources Analysis Support System) is a powerful open-source Geographic Information System (GIS) used for geospatial data management, analysis, image processing, and spatial modeling. It has been actively developed since the 1980s and is supported by the OSGeo Foundation.</p>"},{"location":"#why-use-grass-gis","title":"Why Use GRASS GIS?","text":"<ul> <li>Open Source and Free: No licensing fees, fully community-supported.</li> <li> <p>Powerful Analysis Tools: Ideal for advanced geospatial modeling and automation.</p> </li> <li> <p>Cross-platform Compatibility: Available on Windows, macOS, and Linux.</p> </li> <li>Integration Ready: Works well with Python, PostgreSQL/PostGIS, and other open-source tools.</li> <li>Custom Scripting: Automate workflows using Bash or Python (PyGRASS).</li> </ul> <p>It supports reproducible, large-scale geospatial workflows and is commonly used in environmental modeling, hydrology, agriculture, remote sensing, and academic research.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Raster and vector data support with a rich set of analytical tools</li> <li>Region and mask management for precise control over analysis extents (one of my personal favorites!)</li> <li>Time-series data management and analysis</li> <li>Advanced hydrological and terrain analysis modules</li> <li>3D visualization and volume modeling</li> <li>Flexible data import/export options</li> </ul>"},{"location":"#learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li>GRASS GIS Official Site</li> <li>GRASS GIS Documentation</li> <li>Python API for GRASS</li> <li>GRASS GIS Manuals</li> <li>GRASS GIS Tutorials</li> <li>Intro to GRASS GIS Workshop</li> </ul>"},{"location":"10_scripting/","title":"GRASS GIS Scripting with Python","text":"<p>GRASS GIS can be automated and extended using Python. This page demonstrates how to write a complete geospatial analysis workflow using GRASS GIS commands in Python using <code>grass.script</code> and <code>pygrass</code>.</p> <p>To execute Python scripts that use GRASS GIS modules:</p> <ol> <li>First launch GRASS GIS.</li> <li>Open the GRASS Terminal (comes with the GUI).</li> <li>Run your Python script from within the GRASS session using:</li> </ol>"},{"location":"10_scripting/#_1","title":"GRASS Python Scripting","text":""},{"location":"10_scripting/#python-script-import-raster-data","title":"Python Script: Import Raster Data","text":"<p>This script: - Initializes a GRASS GIS session - Checks if the target mapset exists (creates it if not) - Batch imports all <code>.tif</code> files from a folder</p> <pre><code>import os\nimport sys\nimport subprocess\nimport grass.script as gs\nimport grass.script.setup as gsetup\nimport re\n\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n    input_folder = \"/Users/amanchaudhary/Downloads/chirps_pcp\"\n    for file in os.listdir(input_folder):\n        if file.endswith(\".tif\"):\n            full_path = os.path.join(input_folder, file)\n            name = re.sub(r\"chirps-v3\\.0\\.(\\d{4})\", r\"chirps_pcp_a_\\1\", os.path.splitext(file)[0])\n            print(f\"Importing {file} as {name}\")\n            gs.run_command('r.import', input=full_path, output=name,overwrite=True)\n\n\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Users/amanchaudhary/grassdata\"\n    LOCATION_NAME = \"myproject\"\n    MAPSET = \"chirps_pcp\"                  \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"10_scripting/#python-script-resampling-of-raster-maps","title":"Python Script: Resampling of Raster Maps","text":"<p>This script automates the resampling of annual CHIRPS precipitation raster maps from their native resolution (~0.05\u00b0) to approximately 300 meters (~0.0027\u00b0) using bilinear interpolation. It loops through a range of years, applies the resampling using GRASS GIS\u2019s r.resamp.interp module, and generates new raster layers for each year.</p> <pre><code>import os\nimport grass.script as gs\nimport grass.script.setup as gsetup\nimport re\n\ndef main(gisdb, location, mapset):\n    gsetup.init(gisdb, location, mapset)\n    print(f\"Initialized GRASS session in {gisdb}/{location}/{mapset}\")\n\n    # Set target resolution (~300m \u2248 0.0027 degrees)\n    res = 0.0027\n    gs.run_command(\"g.region\", res=res)\n\n    start_yr = '2020'\n    end_yr = '2024'\n\n\n\n    for year in range(int(start_yr), int(end_yr) + 1):\n        input_raster = f\"chirps_pcp_a_{year}\"\n        resampled_raster = f\"chirps_pcp_resamp_a_{year}\"\n\n        # \ud83d\udd00 Option 1: Resample without interpolation (nearest-neighbor, preserves values exactly)\n        # Use this if you want to change resolution without modifying pixel values\n        #\n        # gs.run_command(\n        #     'r.resample',\n        #     input=input_raster,\n        #     output=resampled_raster,\n        #     overwrite=True\n        # )\n\n        # \ud83d\udd01 Option 2: Resample using bilinear interpolation (smooths values between pixels)\n        gs.run_command(\n            \"r.resamp.interp\",\n            input=input_raster,\n            output=resampled_raster,\n            method=\"bilinear\",\n            overwrite=True\n        )\n\n    print(\"\u2705 All rasters resampled.\")\n\nif __name__ == \"__main__\":\n    GISDBASE = \"/Users/amanchaudhary/grassdata\"\n    LOCATION_NAME = \"myproject\"\n    MAPSET = \"chirps_pcp\"\n\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"10_scripting/#python-script-export-geotiffs","title":"Python Script: Export GeoTIFF's","text":"<pre><code>import os\nimport sys\nimport subprocess\nimport grass.script as gs\nimport grass.script.setup as gsetup\nimport re\n\n\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n\n    # Directory to export rasters\n    export_dir = \"/Users/amanchaudhary/Downloads/chirps_pcp_resamp\"\n    if not os.path.exists(export_dir):\n        os.makedirs(export_dir)\n\n    # create list of all rasters to export\n    raster_names=[]\n    start_yr = '2020'\n    end_yr = '2024'\n\n    for year in range(int(start_yr), int(end_yr) + 1):\n        file_name = f\"chirps_pcp_resamp_a_{year}\"\n        raster_names.append(file_name)\n\n\n    # Export rasters using r.out.gdal\n    for raster in raster_names:\n        output_tif = f\"{export_dir}/{raster}.tif\"\n        gs.run_command(\n            'r.out.gdal',\n            input=raster,\n            output=output_tif,\n            format='GTiff',\n            createopt=\"COMPRESS=LZW\",\n            overwrite=True\n        )\n        print(f\"Raster {raster} exported to {output_tif}\")\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Users/amanchaudhary/grassdata\"\n    LOCATION_NAME = \"myproject\"\n    MAPSET = \"chirps_pcp\"            \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"11_zonalstats/","title":"Zonal Statistics","text":"<p>Zonal statistics summarize raster values (e.g., mean, sum, count) within vector zones such as administrative boundaries, watersheds, or land parcels. This guide explains how to perform zonal statistics in GRASS GIS using a GeoJSON boundary file and a raster map.</p>"},{"location":"11_zonalstats/#import-vector-boundary-geojson","title":"Import Vector Boundary (GeoJSON)","text":"<p>Use <code>v.in.ogr</code> to import a GeoJSON file:</p> <pre><code>v.in.ogr input=/path/to/boundaries.geojson output=zones\n</code></pre> <p>\ud83d\udd0d Check if the projection of your GeoJSON matches the current GRASS location. If not, reproject the vector (see section below).</p>"},{"location":"11_zonalstats/#import-raster-map","title":"Import Raster Map","text":"<p>Use r.import to bring in a GeoTIFF or similar raster file:</p> <pre><code>r.import input=/path/to/raster.tif output=my_raster\n</code></pre>"},{"location":"11_zonalstats/#set-computational-region","title":"Set Computational Region","text":"<p>Match the region to your raster map:</p> <pre><code>g.region raster=my_raster -p\n\n# (Optional) Expand region to fully cover vector zones:\ng.region vector=zones align=my_raster\n</code></pre>"},{"location":"11_zonalstats/#perform-zonal-statistics-with-vraststats","title":"Perform Zonal Statistics with v.rast.stats","text":"<p>Use the vector map (zones) to compute stats from the raster (my_raster) for each polygon:</p> <pre><code>v.rast.stats map=zones raster=my_raster column_prefix=stats method=average,sum,count\n</code></pre> <ul> <li>column_prefix: Adds columns like stats_mean, stats_sum, etc.</li> <li>method: Can be one or more of: average, sum, count, min, max, stddev</li> </ul> <p>This updates the attribute table of the vector map with the calculated values.</p>"},{"location":"11_zonalstats/#view-results","title":"View Results","text":"<p>Display the updated attribute table:</p> <pre><code>v.db.select map=zones\n</code></pre>"},{"location":"11_zonalstats/#optional-export-the-results-to-geojson-or-shapefile","title":"Optional: Export the Results to GeoJSON or Shapefile","text":"<pre><code># Export GeoJSON\nv.out.ogr input=zones output=zones_stats.geojson format=GeoJSON\n\n# or Export Shapefile\nv.out.ogr input=zones output=zones_stats.shp format=ESRI_Shapefile\n\n# or Export Attribute Table to CSV\nv.db.select map=zones separator=comma file=zones_stats.csv\n</code></pre>"},{"location":"11_zonalstats/#optional-reproject-geojson-if-needed","title":"(Optional) Reproject GeoJSON if Needed","text":"<p>If your GeoJSON CRS doesn't match the current GRASS location, you can either:</p> <ul> <li>Reproject using GDAL before importing, or</li> <li>Import it into a matching GRASS location, and use v.proj</li> </ul> <pre><code># Run this inside your target location\nv.proj location=source_location mapset=PERMANENT input=zones output=zones_reprojected\n</code></pre>"},{"location":"11_zonalstats/#python-script-annual-chirps-pcp","title":"Python Script: Annual CHIRPS PCP","text":"<p>This Python script calculates zonal statistics of annual CHIRPS precipitation data (2020\u20132024) over Indian states using GRASS GIS and export results as csv.</p> <ul> <li>India States   \u27a1\ufe0f Download IndiaStates.geojson</li> </ul> <pre><code>import os\nimport subprocess\nimport grass.script as gs\nfrom grass.pygrass.modules.shortcuts import general as g\nfrom grass.pygrass.modules.shortcuts import raster as r\nfrom grass.pygrass.modules.shortcuts import display as d\nfrom grass.pygrass.modules.shortcuts import vector as v\nfrom grass.pygrass.gis import *\nimport grass.script.setup as gsetup\n\n\n# Main function\ndef main(gisdb, location, mapset): \n\n    geojson_file = 'IndiaStates.geojson'\n    output_csv_path=f\"IndiaStates_chirps_pcp_zonalstats.csv\"\n    start_yr = '2020'\n    end_yr = '2024'\n\n    os.environ['GISDBASE'] = gisdb\n    os.environ['LOCATION_NAME'] = location\n\n    # Check if mapset exists; if not, create it\n    mapset_path = os.path.join(gisdb, location, mapset)\n    if not os.path.exists(mapset_path):\n        print(f\"Mapset '{mapset}' does not exist. Creating new mapset...\")\n        # Create the new mapset\n        gs.run_command('g.mapset', flags='c', mapset=mapset, location=location, dbase=GISDBASE)\n    else:\n        print(f\"Mapset '{mapset}' already exists.\")\n\n    # Initialize GRASS session\n    gsetup.init(gisdb, location, mapset)\n    print(f\"GRASS GIS session initialized in {gisdb}/{location}/{mapset}\")\n\n\n    vector_name = os.path.splitext(os.path.basename(geojson_file))[0]\n\n    v.import_(input=geojson_file, output=vector_name, overwrite=True)\n\n    g.mapsets(mapset=\"chirps_pcp\", operation=\"add\")\n\n    gs.run_command('g.region', vector=vector_name, res=0.00292)\n\n\n    for year in range(int(start_yr), int(end_yr) + 1):\n        raster_name=f\"chirps_pcp_resamp_a_{year}\"\n        gs.run_command('v.rast.stats', map=vector_name, raster=raster_name, \n            column_prefix=raster_name, \n            method='average', \n            overwrite=True)\n\n    stats_output = gs.read_command(\n        'v.db.select', map=vector_name, format=\"csv\", overwrite=True\n    )\n\n\n\n    with open(output_csv_path, 'w') as f:\n        f.write(stats_output)\n\n\n\n    print(f\"zonalstats exported successfully: {vector_name}\")\n\n\n\n\nif __name__ == '__main__':\n    GISDBASE = \"/Users/amanchaudhary/grassdata\"\n    LOCATION_NAME = \"myproject\"\n    MAPSET = \"zonalstats\"                 \n\n    # Call the main function\n    main(GISDBASE, LOCATION_NAME, MAPSET)\n</code></pre>"},{"location":"12_resources/","title":"Resources","text":"<p>Explore the official documentation, tutorials, and tools to deepen your understanding of GRASS GIS and its capabilities.</p>"},{"location":"12_resources/#official-links","title":"\ud83d\udd17 Official Links","text":"<ul> <li>GRASS GIS Official Website</li> <li>GRASS GIS Documentation Overview</li> <li>GRASS GIS Manuals (by version)</li> <li>GRASS GIS Python API Reference</li> <li>GitHub Repository</li> </ul>"},{"location":"12_resources/#learning-materials-tutorials","title":"\ud83e\uddf0 Learning Materials &amp; Tutorials","text":"<ul> <li>GRASS GIS Tutorials</li> <li>Introduction to GRASS GIS Workshop</li> <li>Intro to GRASS GIS Workshop (v8.5)</li> <li>GRASS GIS Temporal Framework Tutorial</li> <li>GRASS 8.5.0dev Documentation</li> </ul>"},{"location":"2_installation/","title":"Installation and Setup","text":"<p>GRASS GIS can be installed on all major operating systems, including Windows, macOS, and Linux. Follow the instructions below for your platform.</p>"},{"location":"2_installation/#install-grass-gis","title":"Install GRASS GIS","text":"<p>Download the latest stable release from the official site: https://grass.osgeo.org/download/ Installation Guide: https://grasswiki.osgeo.org/wiki/Installation_Guide</p> <p>Choose the installer based on your operating system:</p> <ul> <li>Standalone installer for Windows</li> <li><code>.dmg</code> package for MacOS</li> <li>Ubuntu: <pre><code>sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable\nsudo apt-get update\nsudo apt-get install grass grass-gui grass-dev\n</code></pre></li> </ul>"},{"location":"3_concepts/","title":"Core Concepts","text":"<p>Understanding the core structure and philosophy of GRASS GIS is essential before diving into spatial analysis. GRASS GIS organizes data and operations in a unique hierarchical structure and uses powerful tools for geospatial processing.</p> <p>The main component of the Data tab is the Data Catalog which shows the GRASS GIS hierarchical structure consisting of database, project and mapset .</p> <ol> <li> <p>GRASS database (root project directory):</p> <ul> <li>GISDBASE is the directory where all GRASS GIS data is stored.</li> <li>It acts as a container that holds LOCATIONS.</li> <li>You can think of GISDBASE as the \"root folder\" where all GRASS-related data for a project is organized.</li> </ul> </li> <li> <p>Location (Project) (defines projection and extent):</p> <ul> <li>A LOCATION is a folder within GISDBASE that defines a specific coordinate system, projection, and geographic extent.</li> <li>Each LOCATION is tied to a specific Coordinate Reference System (CRS), so all maps and data within a location must use the same CRS.</li> </ul> </li> <li> <p>Mapset (stores individual data and settings):</p> <ul> <li>A MAPSET is a subdirectory inside a LOCATION where data is stored. It helps manage different workflows or user data independently, even within the same LOCATION.</li> <li>The PERMANENT mapset inside each LOCATION contains base information such as region settings (the extent and resolution) and the coordinate system. Other mapsets can be created for individual users or tasks within the same location.</li> </ul> </li> </ol> <p>\ud83d\udcd8 Read the GRASS Quickstart Guide to understand this setup better.</p>"},{"location":"3_concepts/#grass-gis-startup-screen","title":"GRASS GIS Startup Screen","text":"<p>When you open GRASS for the first time, a new directory is created in your home folder. This directory is called grassdata by default and stores all your GRASS projects. GRASS projects are simply folders storing your geospatial data with common coordinate reference system (CRS), ensuring consistency of your data. At the project level, data is further organized into subprojects called mapsets, which you can use to manage different subregions or analyses within a project. Each project contains a special mapset called PERMANENT, which is used to store source datasets for your analysis that can be easily accessed from other mapsets.</p> <p></p> <ol> <li> <p>Selecting the GIS Database directory: GRASS data are stored in a directory referred to as DATABASE (also called \"GISDBASE\"). This directory has to be created with a file manager or the mkdir command, before starting to work with GRASS. Within this DATABASE, the projects are organized by project areas stored in subdirectories called LOCATIONs.</p> </li> <li> <p>Selecting the LOCATION (a project): A LOCATION is defined by its coordinate system, map projection and geographical boundaries. The subdirectories and files defining a LOCATION are created automatically when GRASS is started the first time with a new LOCATION. It is important to understand that each projection stays in its own LOCATION. See the \"Location Wizard\" [(4)] to easily create a new LOCATION from scratch from a geocoded file, by defining the parameters or by selecting the corresponding EPSG projection code.</p> </li> <li> <p>Selecting the MAPSET (a subproject): Each LOCATION can have many MAPSETs. Each MAPSET is a LOCATION's subdirectory. New MAPSET can be added at GRASS startup (see related button).</p> </li> <li> <p>Location Wizard: The \"Location Wizard\" let's you easily create a new LOCATION. You will be guided through a series of dialogues to browse and select predefined projections (also via EPSG code) or to define individual projections. You can also create new LOCATION easily from a georeferenced data file (e.g., SHAPE file or GeoTIFF, see below). Find below also some rules to define the default raster resolution for a new LOCATION.</p> </li> <li> <p>Start GRASS: Once you have selected an existing LOCATION/MAPSET or defined a new one, you can enter GRASS. The graphical user interface wxGUI will open and provide you with a menu system, map visualization tool, digitizer, and more.</p> </li> </ol>"},{"location":"3_concepts/#grass-gis-database-structure","title":"GRASS GIS Database Structure","text":"Component Description <code>GISDBASE</code> Root folder where all GRASS GIS data is stored. <code>LOCATION (PROJECT)</code> Folder inside <code>GISDBASE</code> that defines a projection/CRS. All data in a LOCATION shares the same CRS. <code>MAPSET</code> Subdirectory of a LOCATION for storing actual data and managing workflows. <code>PERMANENT</code> Special mapset holding region settings and the default CRS. <code>WIND</code> File in each MAPSET that holds region resolution/extent."},{"location":"3_concepts/#grass-region-computational-window","title":"GRASS Region: Computational Window","text":"<p>Each analysis in GRASS operates within a defined computational region: - It specifies the geographic extent, resolution, and alignment. - You can view or set the region using the <code>g.region</code> command.</p> <p>\ud83d\udccc All raster calculations are restricted to the computational region.</p>"},{"location":"3_concepts/#raster-and-vector-data-models","title":"Raster and Vector Data Models","text":"<p>GRASS supports both raster and vector formats:</p> <ul> <li>Raster data represent continuous surfaces like elevation or precipitation using a grid of cells.</li> <li>Vector data store discrete features such as roads, boundaries, or points of interest using geometries (point, line, polygon).</li> </ul> <p>Common import commands:</p> <ul> <li><code>r.in.gdal</code> \u2013 Import raster data</li> <li><code>v.in.ogr</code> \u2013 Import vector data</li> </ul>"},{"location":"3_concepts/#command-structure-and-modules","title":"Command Structure and Modules","text":"<p>GRASS is modular: each task is handled by a command-line module.</p>"},{"location":"3_concepts/#standard-syntax","title":"Standard Syntax:","text":"<pre><code>module_name input=... output=... [other parameters]\n</code></pre>"},{"location":"3_concepts/#module-prefixes","title":"Module Prefixes:","text":"<ul> <li><code>r.</code> \u2013 Raster modules (e.g., <code>r.mapcalc</code>, <code>r.slope.aspect</code>)</li> <li><code>v.</code> \u2013 Vector modules (e.g., <code>v.buffer</code>, <code>v.overlay</code>)</li> <li><code>g.</code> \u2013 General tools (e.g., <code>g.region</code>, <code>g.list</code>)</li> <li><code>i.</code> \u2013 Imagery and remote sensing</li> <li><code>r3.</code> \u2013 3D Raster data processing tools</li> <li><code>db.</code> \u2013 Database operations</li> <li><code>t.</code> \u2013 Temporal framework</li> <li><code>d.</code> \u2013 Display and visualization tools</li> </ul> <p>Example: <pre><code>r.slope.aspect elevation=dem slope=slope_map aspect=aspect_map\n</code></pre></p> <p>\ud83d\udccc Explore GRASS GIS Tools</p>"},{"location":"3_concepts/#gui-and-cli","title":"GUI and CLI","text":"<ul> <li>GUI (Graphical User Interface): Beginner-friendly interface to access tools visually. </li> <li>CLI (Command Line Interface): Powerful, scriptable, and preferred for advanced workflows. </li> </ul> <p>Both interfaces work seamlessly and reflect the same underlying operations.</p>"},{"location":"3_concepts/#attribute-tables-and-databases","title":"Attribute Tables and Databases","text":"<p>Each vector map can be linked to an attribute table (usually SQLite by default). GRASS provides SQL-like functionality with <code>db.select</code>, <code>db.connect</code>, etc., to manage these databases.</p>"},{"location":"3_concepts/#scripting-and-automation","title":"Scripting and Automation","text":"<ul> <li>GRASS supports Python scripting using the <code>grass.script</code> and <code>grass.pygrass</code> modules.</li> <li>Batch processing is possible with Bash, Makefiles, or Python Notebooks.</li> <li>This enables building automated, reproducible workflows.</li> </ul>"},{"location":"3_concepts/#logging-and-metadata","title":"Logging and Metadata","text":"<p>Every GRASS module logs processing history in the metadata: - View history using <code>r.info</code> or <code>v.info</code> - Helps maintain data provenance and reproducibility</p> <p>By understanding these concepts, you are now ready to begin working with raster and vector data in GRASS GIS.</p>"},{"location":"4_quickstart/","title":"GRASS GIS Quickstart","text":"<p>When launching GRASS GIS for the first time, you will open a default project \"world_latlog_wgs84\" where you can find a map layer called \"country_boundaries\" showing a world map in the WGS84 coordinate system.</p> <p></p>"},{"location":"4_quickstart/#interface-overview","title":"Interface Overview","text":"<p>The GRASS GUI has several panels and tools:</p> <ul> <li>Layer Manager: Controls loaded map layers.</li> <li>Map Display: Shows raster/vector data.</li> <li>Data Catalog: Displays the GRASS data hierarchy.</li> <li>Console: Run GRASS commands directly.</li> <li>Modules Search Bar: Search for specific tools and commands.</li> </ul>"},{"location":"4_quickstart/#getting-started-with-grass-gis","title":"Getting Started with GRASS GIS","text":"<p>This section explains how to set up your working environment in GRASS GIS and import your geospatial data using command line</p>"},{"location":"4_quickstart/#1-create-a-grass-database-directory","title":"1. Create a GRASS Database Directory","text":"<p>Open a terminal and create a directory that will act as the GRASS GIS database:</p> <pre><code># Linux, Mac, *BSD, ...:\nmkdir -p ~/grassdata\n\n# Windows\nmkdir D:\\grassdata\n</code></pre> <p>This directory will store all Locations and Mapsets.</p> <p>This is the root directory that will contain all your GRASS locations and mapsets.</p>"},{"location":"4_quickstart/#2-launch-grass-gis","title":"2. Launch GRASS GIS","text":"<p>Open GRASS GIS normally without a full path so you can create your first Location and Mapset using the GUI.</p> <p>Search for GRASS GIS in the Start Menu and open it normally.</p> <p>In the startup screen:</p> <ul> <li>Set GIS Database to: ~/grassdata or D:\\grassdata</li> <li>Click on New next to Location</li> <li>Choose one of the following:<ul> <li>Create with EPSG Code (e.g., 4326 for WGS84)</li> <li>Import an existing raster/vector to define projection</li> </ul> </li> <li>Once the Location is created, you will be prompted to create your first Mapset (e.g., chirps_pcp)</li> </ul>"},{"location":"4_quickstart/#3-create-a-new-location-using-command-line","title":"3. Create a New Location using command line","text":"<p>Use grass with the -c flag to create a new Location based on a coordinate reference system (CRS). <pre><code># Linux, Mac, *BSD, ...:\ngrass -c EPSG:4326 ~/grassdata/myproject\n\n# Windows\ngrass -c EPSG:4326:3 D:\\grassdata\\myproject\n</code></pre> This command:</p> <ul> <li>Creates a new Location named \"myproject\"</li> <li>Uses EPSG:4326 (WGS 84 coordinate system)</li> <li>Initializes the default PERMANENT mapset</li> </ul>"},{"location":"4_quickstart/#4-create-and-start-a-new-mapset","title":"4. Create and Start a New Mapset","text":"<p>Once your Location (e.g., <code>myproject</code>) is created, you can add a new Mapset to organize your analysis. <pre><code># create a new mapset \ng.mapset -c mapset=chirps_pcp location=myproject\n</code></pre></p> <p>Notes: -  Here, we are creating a mapset named chirps_pcp, which stands for CHIRPS Precipitation Data. We'll use this mapset for importing and analyzing precipitation datasets in upcoming sections. Download CHIRPS Annual Precipitation Data (2020\u20132024):  https://data.chc.ucsb.edu/products/CHIRPS/v3.0/annual/global/tifs/</p>"},{"location":"4_quickstart/#5-launch-grass-into-the-new-mapset","title":"5. Launch GRASS into the new mapset:","text":"<pre><code># Mac/Linux\ngrass --text ~/grassdata/myproject/chirps_pcp\n\n# Windows\ngrass --text D:\\grassdata\\myproject\\chirps_pcp\n</code></pre> <p>Notes: - The new mapset must be inside an existing location.</p>"},{"location":"4_quickstart/#additional-mapset-operations","title":"Additional Mapset Operations","text":"<p>List all available mapsets <pre><code>g.mapsets -l\n</code></pre></p> <p>Switch to a different mapset within the same location <pre><code>g.mapset mapset=ind_annual_data  \n</code></pre></p>"},{"location":"4_quickstart/#sample-data","title":"Sample Data","text":"<p>To follow along with the upcoming tutorials, please download the following sample datasets:</p> <ul> <li> <p>India Boundary   \u27a1\ufe0f Download IndiaBoundary.geojson</p> </li> <li> <p>India States   \u27a1\ufe0f Download IndiaStates.geojson</p> </li> </ul> <p>In this section, we:</p> <ul> <li>Set up the GRASS GIS database structure</li> <li>Created a Location and Mapset</li> <li>Prepared to work with CHIRPS precipitation data</li> </ul> <p>\ud83d\udc49 In the next section, we\u2019ll learn how to import raster and vector data into your mapset and begin your analysis!</p>"},{"location":"5_basics/","title":"GRASS GIS Basics","text":"<p>Now that you've created your Location and Mapset, you're ready to start using GRASS GIS to import data, visualize layers, and perform basic GIS operations.</p> <p>This chapter covers:</p> <ul> <li>Importing raster and vector data  </li> <li>Viewing and managing layers  </li> <li>Setting the computational region  </li> <li>Accessing metadata  </li> <li>Removing/exporting data  </li> </ul>"},{"location":"5_basics/#1-import-raster-data","title":"1. Import Raster Data","text":"<p>To bring in external raster files like <code>.tif</code>: <pre><code>r.import input=/path/to/chirps-v3.0.2024.tif output=chirps_pcp_a_2024\n</code></pre></p> <p>Bulk Import Example: <pre><code>## macOS/Linux\nfor file in /path/to/folder/*.tif; do\n  name=$(basename \"$file\" .tif)\n  r.import input=\"$file\" output=\"$name\"\ndone\n\n## Windows \u2013 PowerShell\nGet-ChildItem \"D:\\path\\to\\folder\\*.tif\" | ForEach-Object {\n  $name = $_.BaseName\n  r.import input=$_.FullName output=$name\n}\n</code></pre></p>"},{"location":"5_basics/#2-import-vector-data","title":"2. Import Vector Data","text":"<p>To import shapefiles or other vector formats: <pre><code>v.import input=/path/to/IndiaBoundary.geojson output=IndiaBoundary\n</code></pre></p> <p>Bulk Import Example: <pre><code>## macOS/Linux\nfor file in /path/to/folder/*.shp; do\n  name=$(basename \"$file\" .shp)\n  v.import input=\"$file\" output=\"$name\"\ndone\n\n## Windows \u2013 PowerShell\nGet-ChildItem \"D:\\path\\to\\folder\\*.shp\" | ForEach-Object {\n  $name = $_.BaseName\n  v.import input=$_.FullName output=$name\n}\n</code></pre> After importing the CHIRPS raster and the IndiaBoundary.geojson, your GRASS GIS environment will be organized into a Location, Mapset, and the corresponding imported datasets.</p> <p>You should see a structure similar to this in the Data Catalog:</p> <p></p>"},{"location":"5_basics/#3-display-layers-in-gui","title":"3. Display Layers in GUI","text":"<p>To visualize data: - Use Layer Manager to add raster/vector layers - Right-click \u2192 Properties to style (color, opacity, etc.)</p> <p>Or from command line: <pre><code>d.rast map=my_raster\nd.vect map=my_vector\n</code></pre></p>"},{"location":"5_basics/#4-set-the-computational-region-optional","title":"4. Set the Computational Region (Optional)","text":"<p>GRASS GIS performs all analysis within the current region extent and resolution. <pre><code># Match region to a raster:\ng.region raster=&lt;existing_raster&gt;\n# or\ng.region vector=&lt;existing_vector&gt;\n\n# Set Resolution\ng.region res=0.003\n\n# To manually set region boundaries and resolution:\ng.region n=25 s=10 e=90 w=70 res=0.01 -p\n</code></pre></p> <p>View current region settings: <pre><code>g.region -p\n</code></pre></p> <p></p>"},{"location":"5_basics/#5-list-imported-layers","title":"5. List Imported Layers","text":"<pre><code>g.list type=raster\ng.list type=vector\n</code></pre>"},{"location":"5_basics/#6-view-layer-metadata","title":"6. View Layer Metadata","text":"<p>For raster: <pre><code>r.info chirps_pcp_a_2024\n</code></pre> </p> <p>For vector: <pre><code>v.info IndiaBoundary\n</code></pre> </p> <p>Geometry-only metadata: <pre><code>r.info -g chirps_pcp_a_2024\n</code></pre> </p>"},{"location":"6_raster_basics/","title":"Raster Analysis","text":"<p>This section introduces fundamental raster operations in GRASS GIS. You'll learn how to perform map algebra, clipping rasters to a boundary, statistical summaries, LULC masking, raster algebra, and temporal aggregation.</p>"},{"location":"6_raster_basics/#clip-raster-to-a-boundary","title":"Clip Raster to a Boundary","text":"<pre><code># Set region to match vector boundary\ng.region vector=IndiaBoundary align=chirps_pcp_a_2024 -p\n\n# Create a mask using the boundary\nr.mask vector=IndiaBoundary\n\n# Clip the raster\nr.mapcalc \"chirps_pcp_a_2024_clipped = chirps_pcp_a_2024\"\n\n# Remove the mask after clipping\nr.mask -r\n</code></pre>"},{"location":"6_raster_basics/#get-raster-statistics-min-max-mean-median","title":"Get Raster Statistics (min, max, mean, median)","text":"<pre><code># Basic stats:\nr.univar map=chirps_pcp_a_2024_clipped -g\n\n# For median and advanced stats:\nr.stats -aCn input=chirps_pcp_a_2024_clipped\n\n# For raster category counts, area and values:\nr.report map=chirps_pcp_a_2024_clipped units=h,c,p\n</code></pre>"},{"location":"6_raster_basics/#lulc-masking-eg-mask-only-cropland-areas","title":"LULC Masking (e.g., Mask only Cropland Areas)","text":"<pre><code># Assuming you have an LULC raster (esa_lulc_2021) where value 40 = cropland:\nr.mapcalc \"cropland_mask = if(esa_lulc_2021 == 40, 1, null())\"\nr.mask raster=cropland_mask\n\n# Apply it to another raster:\nr.mapcalc \"chirps_pcp_a_2024_cropland = chirps_pcp_a_2024\"\n\n# Then remove the mask:\nr.mask -r\n</code></pre>"},{"location":"6_raster_basics/#raster-calculation","title":"Raster Calculation","text":"<pre><code>r.mapcalc \"output_raster = input_raster_a /input_raster_b\"\n</code></pre>"},{"location":"6_raster_basics/#temporal-raster-analysis","title":"Temporal Raster Analysis","text":"<pre><code># Mean over years\nr.series input=chirps_pcp_a_2021,chirps_pcp_a_2022,chirps_pcp_a_2023,chirps_pcp_a_2024 output=chirps_pcp_a_mean_2021_2024 method=average\n\n# Max or Min over years\nr.series input=hirps_pcp_a_2021,chirps_pcp_a_2022,chirps_pcp_a_2023,chirps_pcp_a_2024 output=chirps_pcp_a_max_2021_2024 method=maximum\n\n# Aggregate Monthly to Annual Raster: Annual Sum\nr.series input=$(g.list type=raster pattern=\"chirps_pcp_m_2023_*\" separator=comma) output=chirps_pcp_a_2023_sum method=sum\n\n# Aggregate Monthly to Annual Raster: Annual Mean\nr.series input=$(g.list type=raster pattern=\"chirps_pcp_m_2023_*\" separator=comma) output=chirps_pcp_a_2023_mean method=average\n</code></pre>"},{"location":"7_vector_basics/","title":"Vector Operations","text":"<p>This section explains key vector operations in GRASS GIS using command-line modules. These include buffering, overlays, filtering, attribute queries, and conversions \u2014 all handled in terminal mode.</p>"},{"location":"7_vector_basics/#list-vector-maps","title":"List Vector Maps","text":"<pre><code># List all available vector maps in the current mapset:\ng.list type=vector\n\n# Get basic information about a vector map:\nv.info map=roads\n\n# Check the attribute table:\nv.db.select map=roads\n</code></pre>"},{"location":"7_vector_basics/#create-buffers-around-features","title":"Create Buffers Around Features","text":"<pre><code># Use v.buffer to create buffer zones (e.g., 1000-meter buffer around roads):\nv.buffer input=roads output=roads_buffer distance=1000\n</code></pre>"},{"location":"7_vector_basics/#select-and-extract-features","title":"Select and Extract Features","text":"<pre><code># Select and Extract Features by Attribute\n# Use v.extract to filter features using SQL-like queries.\nv.extract input=roads output=highways where=\"type = 'highway'\"\n\n# Check the attribute table:\nv.db.select map=roads\n</code></pre>"},{"location":"7_vector_basics/#overlay-vector-layers","title":"Overlay Vector Layers","text":"<pre><code># Intersect\nv.overlay ainput=landuse binput=admin_boundaries operator=and output=landuse_admin\n\n# Union:\nv.overlay ainput=layer1 binput=layer2 operator=or output=combined_layer\n\n# Dissolve: Merge adjacent polygons with the same attribute\nv.dissolve input=landuse output=landuse_dissolved column=category\n</code></pre>"},{"location":"7_vector_basics/#convert-between-raster-and-vector","title":"Convert Between Raster and Vector","text":"<pre><code># Raster to Vector:\nr.to.vect input=classified_map output=land_units type=area\n\n\n# Vector to Raster:\nv.to.rast input=land_units output=land_raster use=cat\n</code></pre>"},{"location":"7_vector_basics/#reproject-a-vector-map","title":"Reproject a Vector Map","text":"<pre><code># To reproject from one location to another, use v.proj inside the target location\nv.proj location=source_location mapset=PERMANENT input=roads output=roads_projected\n</code></pre>"},{"location":"7_vector_basics/#export-vector-maps","title":"Export Vector Maps","text":"<pre><code># Export to Shapefile or GeoPackage:\nv.out.ogr input=roads_buffer output=roads_buffer.shp format=ESRI_Shapefile\n\n# Export to GeoJSON:\nv.out.ogr input=roads output=roads.geojson format=GeoJSON\n</code></pre>"},{"location":"9_common-commands/","title":"Common GRASS GIS Commands","text":"<p>Here are some frequently used GRASS GIS commands useful for working with rasters, vectors, regions, and exporting data.</p>"},{"location":"9_common-commands/#1-starting-and-managing-sessions","title":"1. Starting and Managing Sessions","text":"<pre><code># Create a new location from scratch\ngrass -c /mnt/mapdata/grassdata/new_location\n\n\n# Start GRASS in an existing location/mapset\ngrass /path/to/mapset/location\n\n# Create a new mapset inside an existing location\ng.mapset -c mapset=test location=myproject\n\n# Switch to a different mapset\ng.mapset mapset=pcp_mean_monthly\n\n# Add multiple mapsets to current search path\ng.mapsets mapset=nrsc_lulc,ind_annual_data operation=add\n</code></pre>"},{"location":"9_common-commands/#2-map-and-region-management","title":"2. Map and Region Management","text":"<pre><code># Check raster resolution and extent\nr.info -g pcpm_imd_2023_10\n\n# List all rasters and vectors\ng.list type=raster,vector\n\n# List all rasters and export to file\ng.list rast map=etg_etb_ind_monthly &gt;&gt; names.txt\n\n# Set region to match a raster or vector map\ng.region raster=your_raster_map\ng.region vector=your_vector_map\n\n# View current region settings\ng.region -p\n</code></pre>"},{"location":"9_common-commands/#3-import-data","title":"3. Import Data","text":"<pre><code># Import a raster file (GeoTIFF, NetCDF, etc.)\nr.import input=chirps_pcp.tif output=chirps_pcp\n\n# Import a vector file (GeoJSON, Shapefile, etc.)\nv.import input=IndiaBoundary.geojson output=india_boundary\n</code></pre>"},{"location":"9_common-commands/#4-raster-vector-info","title":"4. Raster &amp; Vector Info","text":"<pre><code># View metadata of a raster or vector\nr.info map=chirps_pcp\nv.info map=india_boundary\n</code></pre>"},{"location":"9_common-commands/#5-raster-operations","title":"5. Raster Operations","text":"<pre><code># Map algebra\nr.mapcalc expression=\"output_map = raster1 + raster2\"\n\n# Zonal statistics\nr.univar map=raster_map zones=vector_zones_map\n\n# Raster statistics summary\nr.stats -a input=raster_map_name\n\n# Merge rasters\nr.patch input=map1,map2 output=merged_map\n\n# Clip raster with current region\nr.clip input=your_raster output=clipped_raster\n\n# Resample raster\nr.resample input=your_raster output=resampled_raster\n\n# Apply raster mask\nr.mask raster=mask_map\n\n# Export raster to GeoTIFF\nr.out.gdal input=raster_map output=/path/output.tif format=GTiff\n</code></pre>"},{"location":"9_common-commands/#6-vector-operations","title":"6. Vector Operations","text":"<pre><code># Buffer vector geometry\nv.buffer input=your_vector output=buffered_vector distance=500\n\n# Convert vector to raster\nv.to.rast input=your_vector output=rasterized_vector use=cat\n\n# Convert raster to vector\nr.to.vect input=your_raster output=vector_map feature=area\n\n# Merge vectors\nv.patch input=vector1,vector2 output=merged_vector\n\n# Export vector to Shapefile\nv.out.ogr input=vector_map output=/path/output.shp format=ESRI_Shapefile\n</code></pre> <p>Tip: Always verify the region and CRS settings (<code>g.region -p</code>) before running any spatial operation.</p>"}]}